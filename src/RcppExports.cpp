// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Fiducial_Estimator
Rcpp::List Fiducial_Estimator(const std::vector<double>& l, const std::vector<double>& r, std::vector<double>& timepoints, double tau, double alpha);
RcppExport SEXP _FICE_Fiducial_Estimator(SEXP lSEXP, SEXP rSEXP, SEXP timepointsSEXP, SEXP tauSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type r(rSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type timepoints(timepointsSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(Fiducial_Estimator(l, r, timepoints, tau, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FICE_Fiducial_Estimator", (DL_FUNC) &_FICE_Fiducial_Estimator, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_FICE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
